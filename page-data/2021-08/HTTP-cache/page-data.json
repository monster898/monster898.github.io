{"componentChunkName":"component---src-templates-blog-post-js","path":"/2021-08/HTTP-cache/","result":{"data":{"site":{"siteMetadata":{"title":"好成的blog"}},"markdownRemark":{"id":"d97f59bd-1b72-5094-a7fe-1dc8b13b04b4","excerpt":"Why?使用缓存的理由是? 减少冗余的网络传输：当客户端多次请求服务器上同一个资源时，服务器都得多次传回，相同的字节在网络上一遍遍的传输，会消耗网络带宽，降低传输速度，加重 web…","html":"<h2>Why?使用缓存的理由是?</h2>\n<ul>\n<li><strong>减少冗余的网络传输</strong>：当客户端多次请求服务器上同一个资源时，服务器都得多次传回，相同的字节在网络上一遍遍的传输，会消耗网络带宽，降低传输速度，加重 web 服务器的负载。利用缓存，可以保留第一次服务器响应的副本，后继请求都由缓存处理。</li>\n<li><strong>缓解网络瓶颈的问题</strong>：很多网络为本地网络客服端提供的带宽比为服务器提供的带宽要宽，客服端会以路径最慢的的网速访问服务器，如果客户端从一个快速局域网的缓存中得到了一份副本，缓存可以提高性能。</li>\n<li><strong>降低对原始服务器的要求</strong>：服务器可以更快的响应，避免过载（多人同时向服务器请求）的情况出现。</li>\n<li><strong>降低距离时延</strong>：因为从较远的地方加载页面的速度慢一些。</li>\n</ul>\n<h2>缓存的分类</h2>\n<h3>(私有)浏览器缓存</h3>\n<p>单个用户专用的缓存称为私有缓存，通常为 web 浏览器内建，浏览器缓存拥有用户通过 HTTP 下载的所有文档。这些缓存为浏览过的文档提供向后/向前导航，保存网页，查看源码等功能，可以避免再次向服务器发起多余的请求。它同样可以提供缓存内容的离线浏览。</p>\n<h3>公有代理缓存</h3>\n<p>共有缓存是特殊的共享代理服务器，被称为缓存代理服务器或者代理缓存，可以被多个用户使用。例如，ISP 或你所在的公司可能会架设一个 web 代理来作为本地网络基础的一部分提供给用户。这样热门的资源就会被重复使用，减少网络拥堵与延迟。</p>\n<h2>缓存的基本处理过程(以 HTTP GET 请求为例)</h2>\n<ol>\n<li>\n<p>接收：缓存从网络中读取抵达的请求报文。</p>\n</li>\n<li>\n<p>解析：缓存对报文进行解析，提取出 URL 和各种首部。</p>\n</li>\n<li>\n<p>查找：缓存查看是否有本地副本可用，本地副本可能储存在内存、本地磁盘，甚至附近的另一台计算机中。如果没有就获取一份副本，并将其保存在本地中。\r\n已缓存对象中包含了服务器响应主体和响应首部，这样就会在缓存命中时返回正确的服务器首部。</p>\n</li>\n<li>\n<p>新鲜度检测：如果缓存中有服务器文档的副本可用，会查看文档是否足够新鲜(跟我们购买食物查看是否已经过期一样)，如果不是，就进入再验证流程。过期日期是通过特殊的 Cache-Control 首部和 Expires 首部决定的，如果没有这两个首部中的任意一个，缓存可以计算一个试探性最大试用期，可以使用任意的算法，例如 LM-Factor 算法是一个常用的算法。</p>\n</li>\n<li>\n<p>创建响应：缓存会用新的首部和已缓存的主体来构建一条响应报文。</p>\n</li>\n<li>\n<p>发送：缓存通过网络将响应发回给客服端。</p>\n</li>\n<li>\n<p>日志：缓存可选地创建一个日志文件条目来描述这个事务。</p>\n</li>\n</ol>\n<h2>关键步骤</h2>\n<h3>新鲜度检测</h3>\n<p>判断缓存中的文档(资源)是否过期。服务器通过 HTTP/1.0+的 Expires 首部或者 HTTP1.1 的 Cache-Control:max-age 响应首部来指定过期时间，这两个首部做的事情一样，只不过 Expires 用的是绝对时间，它依赖于计算机时钟的正确设置。所以我们更倾向于使用新的 Cache-Control 首部。</p>\n<p>例子：</p>\n<p>Cache-Control:max-age=484200</p>\n<p>Cache-Control:public, max-age=31536000, s-maxage=31536000, immutable，其中：</p>\n<ul>\n<li>public 表示响应可以被任何对象（包括：发送请求的客户端，代理服务器，等等）缓存，即使是通常不可缓存的内容。默认 private。</li>\n<li>max-age 表示超过 31536000s 之后缓存被认为过期</li>\n<li>s-maxage 仅适用于共享缓存(比如各个代理)，私有缓存会忽略它</li>\n<li>immutable 如果没有超过时间上的过期失效时间，那么服务器端该页面内容将不会改变，这样浏览器就不应该再发送有条件的重新验证请求。简而言之，可以理解为阻止了无意义的条件请求。</li>\n</ul>\n<p>Expires: Fri, 05 Jul 2002, 05:00:00 GMT</p>\n<p>缓存文档过期之前，缓存可以以任意频率使用这些副本，而无需与服务器联系（除客户端明确要求以外，例如浏览器设置 disable cache）</p>\n<h3>服务器再验证</h3>\n<p>这个流程发生在新鲜度检测之后，如果文档不新鲜则必须进入这个流程。另外文档不新鲜并不代表了服务器一定对此资源发生了更改，而只是意味着到了要进行核对的时间了。</p>\n<p><strong>验证的方法是 HTTP 条件方法，验证的结果则是内容发生了变化和没有发生变化。</strong></p>\n<h4>条件方法</h4>\n<p>HTTP 允许缓存向原始服务器发送一个“条件 GET”，当服务器中的对象与缓存的中副本不同时，才回送对象主体。这样就将验证和对象的获取结合成了单个 GET，向 GET 请求中添加特殊的条件首部，如果条件为真，服务器才会返回对象。</p>\n<p>最有用的两个条件请求首部<code class=\"language-text\">If-Modified-Since</code>和<code class=\"language-text\">IF-None-Match</code>:</p>\n<p><code class=\"language-text\">If-Modified-Since:&lt;date></code>:如果在这个日期之后，文档被修改了，则此条件为真，成功执行 GET，携带新首部的文档返回给缓存，新首部除了包含其他信息之外，还有一个新的过期日期。如果条件为假，<strong>服务器向客户端返回一个 304 Not Modified 报文</strong>，不会返回文档主体。可以和文档的 Last-Modified 一起使用，原始服务器会将最后的修改日期附加到所提供的文档上去。当缓存文档进行再验证时\r\n<code class=\"language-text\">If-Modified-Since:&lt;cached last-modified date></code>。服务器与最后修改的时间进行比对。</p>\n<p><code class=\"language-text\">IF-None-Match</code>:这种可以理解为通过标签去再验证，如果这个对象的标签跟服务器原文档的标签一致，则返回 304，否则在 200 OK 响应中返回新的对象和新的标签。这个标签就是实体标签<code class=\"language-text\">ETag</code>,实体标签是附加到对象上的任意标签（引用字符串），他们可能包含了文档的序列号或者版本名，或者是文档内容的校验和其他指纹信息。可以包含多个实体标签，告诉服务器，缓存中已经这些文档版本的副本。</p>\n<h4>强弱验证类型</h4>\n<p>—mdn</p>\n<blockquote>\n<p>强验证类型</p>\n<p>强验证类型的作用在于确保要比较的资源与其相比较的对象之间每一个字节都相同。对于有些首部来说需要明确指定该验证类型，而对于另外一些来说则是默认值就是强验证类型。强验证类型的要求相当严格，在服务器层面来说可能较难保证。但是它确保了数据在任何时候都没有缺损，有时候则需要以牺牲性能为代价。</p>\n<p>使用 Last-Modified 首部很难为强验证类型提供一个唯一标识。通常这是由 ETag 首部来完成的，该首部可以提供使用 MD5 算法获取的资源（或其衍生品）的散列值。</p>\n</blockquote>\n<blockquote>\n<p>弱验证类型</p>\n<p>弱验证类型与强验证类型不同，因为它会把内容相同的两份文件看做是一样的。例如，使用弱验证类型，一个页面与另外一个页面只是在页脚显示的时间上有所不同，或者是展示的广告不相同，那么就会被认为是相同的。但是在使用强验证的情况下，二者是不同的。构建应用于弱验证类型的标签（etag）体系可能会比较复杂，因为这会涉及到对页面上不同的元素的重要性进行排序，但是会对缓存性能优化相当有帮助。</p>\n</blockquote>\n<h4>验证的结果</h4>\n<p>验证的结果无非就是两种情况，一种是有变化，一种则是无变化。</p>\n<ul>\n<li>如果再验证显示内容发生了变化，缓存会获取一份新的文档副本存在旧文档的位置，然后将文档发送给客户端。</li>\n<li>如果再验证显示内容没有发生变化，缓存只需要获取新的首部，包括一个新的过期日期，并对缓存中的首部进行更新就行了。</li>\n</ul>\n<h4>什么时候使用 ETag 和 Last-Motified</h4>\n<p>这个要看客服端和服务器的版本</p>\n<p>对于 HTTP/1.1 的源服务器：比较好的做法是同时发送强实体标签和 Last-Modified 值。</p>\n<p>对于客户端：HTTP/1.0 使用 Last-Motified，HTTP/1.1 使用 ETag。\r\n如果缓存或服务器收到的请求既带有 If-Modified-Since，又带有实体标签首部，那么只有这两个条件都满足时，才能返回 304 响应。</p>\n<h3>其他</h3>\n<h5>注意 Cache-Control: no-store 和 Cache-control：no-cache 的不同。</h5>\n<p>no-store 禁止缓存对响应进行复制，缓存通常会像非缓存代理服务器一样，向客服端转发一条 no-store 的响应，然后删除对象。</p>\n<p>no-cache 实际上是可以存储在本地缓存区的，只是在与原始服务器进行新鲜度再验证之前，缓存不能将其提供给客服端使用。这意味着向缓存获取资源时，每次都要进行再验证！如果文档足够新鲜，则每次返回 304 Not Motified!</p>\n<p><strong>Http/1.1 中的 Pragma：no-cache 是兼容 HTTP/1.0+，不与 HTTP/1.0 应用程序交互的话，http1.1 应用程序都应该使用 Cache-Control：no-cache。</strong></p>\n<h5>Cache-Control: must-revalidate</h5>\n<p>当使用了 “must-revalidate” 指令，那就意味着缓存在考虑使用一个陈旧的资源时，必须先验证它的状态，已过期的缓存将不被使用。</p>\n<h3>参考资料</h3>\n<hr>\n<p>《HTTP 权威指南》</p>\n<p><a href=\"https://blog.csdn.net/tenfyguo/article/details/5892582\">关于何时使用实体标签 ETag 和最后修改时间(Last-modified)的规则</a></p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Caching\">HTTP 缓存</a></p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/ETag\">Etag</a></p>","frontmatter":{"title":"谈谈HTTP缓存","date":"August 22, 2021","description":"计算机网络"},"timeToRead":7},"previous":{"fields":{"slug":"/2021-08/CSS-layout-tricks/"},"frontmatter":{"title":"CSS tricks"}},"next":{"fields":{"slug":"/2021-09/How-https-ensure-web-security/"},"frontmatter":{"title":"HTTPS如何确保安全性？"}}},"pageContext":{"id":"d97f59bd-1b72-5094-a7fe-1dc8b13b04b4","previousPostId":"38393101-efee-5468-88a0-4ce130afb893","nextPostId":"1f0838dc-61cc-58e8-a9c5-e46387469d86"}},"staticQueryHashes":["2841359383","3415673938"]}